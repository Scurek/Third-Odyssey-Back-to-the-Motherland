# -- Noble estates --

nhs_has_nobles_estate = {
	OR = {
		has_estate = estate_nobles
		has_estate = estate_nhs_nobles
		has_estate = estate_nhs_apogonoi
	}
}

nhs_nobles_estate_territory = {
	OR = {
		estate_territory = {
			estate = estate_nobles
			territory = $territory$
		}
		estate_territory = {
			estate = estate_nhs_nobles
			territory = $territory$
		}
		estate_territory = {
			estate = estate_nhs_apogonoi
			territory = $territory$
		}
	}
}

nhs_nobles_estate_loyalty = {
	OR = {
		estate_loyalty = {
			estate = estate_nobles
			loyalty = $loyalty$
		}
		estate_loyalty = {
			estate = estate_nhs_nobles
			loyalty = $loyalty$
		}
		estate_loyalty = {
			estate = estate_nhs_apogonoi
			loyalty = $loyalty$
		}
	}
}

nhs_nobles_estate_influence = {
	OR = {
		estate_influence = {
			estate = estate_nobles
			influence = $influence$
		}
		estate_influence = {
			estate = estate_nhs_nobles
			influence = $influence$
		}
		estate_influence = {
			estate = estate_nhs_apogonoi
			influence = $influence$
		}
	}
}

nhs_has_noble_estate_led_regency = {
	OR = {
		has_estate_led_regency = {
			estate = estate_nobles
			[[duration]
			duration = $duration$
			]
		}
		has_estate_led_regency = {
			estate = estate_nhs_nobles
			[[duration]
			duration = $duration$
			]
		}
		has_estate_led_regency = {
			estate = estate_nhs_apogonoi
			[[duration]
			duration = $duration$
			]
		}
	}
}

nhs_num_of_noble_estate_privileges = {
	OR = {
		num_of_estate_privileges = {
			estate = estate_nobles
			value = $value$
		}
		num_of_estate_privileges = {
			estate = estate_nhs_nobles
			value = $value$
		}
		num_of_estate_privileges = {
			estate = estate_nhs_apogonoi
			value = $value$
		}
	}
}

to_num_of_noble_privileges_check = {
	if = {
		limit = {
			has_estate = estate_nobles
		}
		to_num_of_privileges_check_estate_nobles = yes
	}
	if = {
		limit = {
			has_estate = estate_nhs_nobles
		}
		to_num_of_privileges_check_estate_nhs_nobles = yes
	}
	if = {
		limit = {
			has_estate = estate_nhs_apogonoi
		}
		to_num_of_privileges_check_estate_nhs_apogonoi = yes
	}
}

to_has_noble_loyalty_modifier = {
	OR = {
		has_estate_loyalty_modifier = {
			estate = estate_nobles
			modifier = $modifier$
		}
		has_estate_loyalty_modifier = {
			estate = estate_nhs_nobles
			modifier = $modifier$
		}
		has_estate_loyalty_modifier = {
			estate = estate_nhs_apogonoi
			modifier = $modifier$
		}
	}
}

to_crown_stronger_than_nobles = {
	OR = {
		AND = {
			has_estate = estate_nobles
			crown_stronger_than_estate = { estate = estate_nobles }
		}
		AND = {
			has_estate = estate_nhs_nobles
			crown_stronger_than_estate = { estate = estate_nhs_nobles }
		}
		AND = {
			has_estate = estate_nhs_apogonoi
			crown_stronger_than_estate = { estate = estate_nhs_apogonoi }
		}
	}
}

# -- Native Estates --

nhs_native_priv_inclusive_citizenship_province = {
	owner = {
		nhs_has_native_priv_inclusive_citizenship = yes
	}
	OR = {
		continent = north_america
		continent = south_america
	}
	native_size = 0.01
}

to_vov_native_priv_benevolent_conquerors_province = {
	owner = {
		has_estate_privilege = to_vov_native_priv_benevolent_conquerors
	}
	OR = {
		continent = north_america
		continent = south_america
	}
	native_size = 0.01
}

nhs_native_priv_cultural_sufferance_province_trigger = {
	owner = {
		OR = {
			nhs_has_native_priv_inclusive_citizenship = yes
			has_estate_privilege = to_vov_native_priv_benevolent_conquerors
		}
	}
	has_owner_accepted_culture = no
}

nhs_has_native_priv_inclusive_citizenship = {
	OR = {
		has_estate_privilege = nhs_native_priv_inclusive_citizenship_early
		has_estate_privilege = nhs_native_priv_inclusive_citizenship_mid
	}
}

nhs_has_native_priv_divide_et_impera = {
	OR = {
		has_estate_privilege = nhs_native_priv_divide_et_impera_early
		has_estate_privilege = nhs_native_priv_divide_et_impera_mid
	}
}

nhs_has_native_priv_pax_romana = {
	OR = {
		has_estate_privilege = nhs_native_priv_pax_romana_early
		has_estate_privilege = nhs_native_priv_pax_romana_mid
	}
}

# Check if has any native estate (early, mid, late)
# We can keep this for when native estates ever differentiate again...
# Use: nhs_has_any_native_estate = yes
nhs_has_any_native_estate = {
	has_estate = estate_all_natives
}

# Check if any native estate has QUANTITY loyalty
# We can keep this for when native estates ever differentiate again...
# Use: nhs_check_loyalty_any_native_estate = { QUANTITY = 30 }
nhs_check_loyalty_any_native_estate = {
	estate_loyalty = {
		estate = estate_all_natives
		loyalty = $QUANTITY$
	}
}

# Check if any native estate has QUANTITY influence
# We can keep this for when native estates ever differentiate again...
# Use: nhs_check_influence_any_native_estate = { QUANTITY = 30 }
nhs_check_influence_any_native_estate = {
	estate_influence = {
		estate = estate_all_natives
		influence = $QUANTITY$
	}
}

to_councils_formation_not_active = {
	custom_trigger_tooltip = {
		tooltip = to_councils_formation_not_active
		OR = {
			NOT = { has_country_flag = nhs_councils_formation_event_active }
			has_country_flag = to_bypass_councils_formation_event_active_check
		}
	}	
}

to_has_overlords_council_privileges = {
	ai = yes
	is_subject = yes
	overlord = {
		has_estate = estate_all_natives
	}
}

# -- Misc --

to_nhs_nobles_had_event_check = {
	if = {
		limit = {
			has_country_flag = nhs_disable_noble_privileges
		}
		custom_trigger_tooltip = {
			tooltip = to_nhs_nobles_had_event_check_tt
			always = no
		}
	}
}

to_estate_will_revolt = {
	has_estate = $ESTATE$
	OR = {
		NOT = {
			estate_loyalty = {
				estate = $ESTATE$
				loyalty = 30
			}
		}
		AND = {
			NOT = { estate_has_exempt_from_seize_land_privilege = { estate = $ESTATE$ } }
			NOT = {
				estate_loyalty = {
					estate = $ESTATE$
					loyalty = 50
				}
			}
		}
	}
}

has_exempt_from_seize_land_for_estate_nhs_nobles = {
	has_estate_privilege = estate_nobles_levies
}
has_exempt_from_seize_land_for_estate_nhs_apogonoi = {
	always = no	#Doesn't have Exempt from Seize Land privileges
}
has_exempt_from_seize_land_for_estate_nhs_pipiltin = {
	always = no	#Doesn't have Exempt from Seize Land privileges
}
has_exempt_from_seize_land_for_estate_clans = {
	always = no	#Doesn't have Exempt from Seize Land privileges
}
has_exempt_from_seize_land_for_estate_all_natives = {
	# always = no	#Doesn't have Exempt from Seize Land privileges
	has_estate_privilege = nhs_native_privilege_foreign_invaders
}

to_base_num_of_privileges_check = {
	NOT = {		
		num_of_estate_privileges = {
			estate = $ESTATE$
			value = 4
		}
	}
}

to_num_of_privileges_check_estate_nobles = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_nobles
	}
}

to_num_of_privileges_check_estate_brahmins = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_brahmins
	}
}

to_num_of_privileges_check_estate_burghers = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_burghers
	}
}

## Cannot be used since PDX broke using has_estate_privilege in scripted triggers used in privilege triggers
to_num_of_privileges_check_estate_church = {
	if = {
		limit = {
			has_estate_privilege = estate_church_nhs_inquisition_privilege
		}
		NOT = {
			num_of_estate_privileges = {
				estate = estate_church
				value = 5
			}
		}
	}
	else = {
		NOT = {
			num_of_estate_privileges = {
				estate = estate_church
				value = 4
			}
		}
	}
}

to_num_of_privileges_check_estate_cossacks = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_cossacks
	}
}

to_num_of_privileges_check_estate_dhimmi = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_dhimmi
	}
}

to_num_of_privileges_check_estate_jains = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_jains
	}
}

to_num_of_privileges_check_estate_maratha = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_maratha
	}
}

to_num_of_privileges_check_estate_nomadic_tribes = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_nomadic_tribes
	}
}

to_num_of_privileges_check_estate_rajput = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_rajput
	}
}

to_num_of_privileges_check_estate_vaisyas = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_vaisyas
	}
}

to_num_of_privileges_check_estate_nhs_nobles = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_nhs_nobles
	}
}

to_num_of_privileges_check_estate_nhs_apogonoi = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_nhs_apogonoi
	}
}

to_num_of_privileges_check_estate_nhs_pipiltin = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_nhs_pipiltin
	}
}

to_num_of_privileges_check_estate_clans = {
	to_base_num_of_privileges_check = {
		ESTATE = estate_clans
	}
}

## Cannot be used since PDX broke using has_estate_privilege in scripted triggers used in privilege triggers
to_num_of_privileges_check_estate_all_natives = {
	if = {
		limit = {
			has_estate_privilege = nhs_native_privilege_foreign_invaders
			has_estate_privilege = nhs_native_privilege_seize_land
		}
		NOT = {
			num_of_estate_privileges = {
				estate = estate_all_natives
				value = 6
			}
		}
	}
	else_if = {
		limit = {
			OR = {
				has_estate_privilege = nhs_native_privilege_foreign_invaders
				has_estate_privilege = nhs_native_privilege_seize_land
			}
		}
		NOT = {
			num_of_estate_privileges = {
				estate = estate_all_natives
				value = 5
			}
		}
	}
	else = {
		NOT = {
			num_of_estate_privileges = {
				estate = estate_all_natives
				value = 4
			}
		}
	}
}

to_any_estate_will_revolt = {
	OR = {
		to_estate_will_revolt = { ESTATE = estate_nobles }
		to_estate_will_revolt = { ESTATE = estate_brahmins }
		to_estate_will_revolt = { ESTATE = estate_burghers }
		to_estate_will_revolt = { ESTATE = estate_church }
		to_estate_will_revolt = { ESTATE = estate_cossacks }
		to_estate_will_revolt = { ESTATE = estate_dhimmi }
		to_estate_will_revolt = { ESTATE = estate_jains }
		to_estate_will_revolt = { ESTATE = estate_maratha }
		to_estate_will_revolt = { ESTATE = estate_nomadic_tribes }
		to_estate_will_revolt = { ESTATE = estate_rajput }
		to_estate_will_revolt = { ESTATE = estate_vaisyas }
	
		to_estate_will_revolt = { ESTATE = estate_nhs_nobles }
		to_estate_will_revolt = { ESTATE = estate_nhs_apogonoi }
		to_estate_will_revolt = { ESTATE = estate_nhs_pipiltin }
		to_estate_will_revolt = { ESTATE = estate_clans }
		# to_estate_will_revolt = { ESTATE = estate_all_natives }
	}
}

to_spawn_rebels_valid_province_tribal_land = {
	has_province_modifier = to_nat_tribal_development
	to_spawn_rebels_valid_province = yes
}

to_spawn_rebels_valid_province_integrated_native_land = {
	OR = {
		culture = elysameric
		culture = skraeling
	}
	to_spawn_rebels_valid_province = yes
}

to_spawn_rebels_valid_province_native_land = {
	to_nat_tribal_native_culture_province = yes
	NOT = { culture = elysameric }
	NOT = { culture = skraeling }
	to_spawn_rebels_valid_province = yes
}

to_spawn_rebels_valid_province = {
	OR = {
		is_in_capital_area = yes
		is_state_core = root
	}
	is_city = yes
	is_capital = no
	NOT = {
		area_for_scope_province = {
			owned_by = root
			has_province_flag = seize_land_spawn_unrest_and_rebels
		}
	}
}
