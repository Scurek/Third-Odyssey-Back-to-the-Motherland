# Triggers and effects will be given the Actor's scope, with the Recipient's as FROM

# Imperial Associates
cancel_nhs_associate =  {
	category = influence
	require_acceptance = no
	is_visible = {
		overlord_of = FROM
		FROM = {
			is_subject_of_type = nhs_imperial_associate
		}
	}
	is_allowed = {
		is_at_war = no
		FROM = {
			is_at_war = no
		}
	}
	on_accept = {
		FROM = {
			grant_independence = yes
		}
		to_on_dependency_lost = yes
	}
	ai_will_do = {
		always = no
	}
}

# Colonial Actions
nhs_limit_expansion_on =  {
	category = influence
	require_acceptance = no
	is_visible = {
		nhs_check_all_elysian_tags = { CONDITION = tag }
		overlord_of = FROM
		FROM = {
			OR = {
				tag = SHQ
				tag = CM1
				tag = KYK
				tag = MSG
				tag = MSN
				tag = MK1
				tag = HLL
				tag = VIN
			}
			NOT = { has_country_flag = nhs_restricted_expansion_s }
		}
		OR = {
			NOT = { has_country_modifier = nhs_handicap_settlers }
			NOT = { FROM = { technology_group = ROOT } }
		}
	}
	is_allowed = {
		FROM = {
			num_of_colonists = 1
			custom_trigger_tooltip = {
				tooltip = nhs_not_restricted_expansion_tt
				NOT = { has_country_flag = nhs_restricted_expansion_s }
			}
		}
	}
	on_accept = {
		FROM = {
			set_country_flag = nhs_restricted_expansion_s
			if = {
				limit = {
					FROM = {
						tag = MSG
						tag = MSN
						tag = MK1
						tag = HLL
						tag = VIN
					}
				}
				clr_country_flag = to_subsidising_colonisation
			}
		}
	}
	ai_will_do = {
		always = no
	}
}

nhs_limit_expansion_off =  {
	category = influence
	require_acceptance = no
	is_visible = {
		nhs_check_all_elysian_tags = { CONDITION = tag }
		overlord_of = FROM
		FROM = {
			OR = {
				tag = SHQ
				tag = CM1
				tag = KYK
				tag = MSG
				tag = MSN
				tag = MK1
				tag = HLL
				tag = VIN
			}
			has_country_flag = nhs_restricted_expansion_s
		}
	}
	is_allowed = {
		FROM = {
			custom_trigger_tooltip = {
				tooltip = nhs_not_unrestricted_expansion_tt
				has_country_flag = nhs_restricted_expansion_s
			}
		}
	}
	on_accept = {
		FROM = {
			clr_country_flag = nhs_restricted_expansion_s
		}
	}
	ai_will_do = {
		always = no
	}
}

nhs_carribean_to_kykladia = {
	category = influence
	require_acceptance = no
	is_visible = {
		overlord_of = FROM
		FROM = {
			tag = KYK
		}
		any_owned_province = {
			region = carribeans_region
			is_colony = no
		}
	}
	is_allowed = {
		is_at_war = no
		FROM = {
			is_at_war = no
		}
	}
	on_accept = {
		hidden_effect = {
			every_owned_province = {
				limit = {
					region = carribeans_region
					is_colony = no
				}
				cede_province = FROM
				if = {
					limit = {
						is_core = ROOT
					}
					add_core = FROM
					#hidden_effect = {
					#	remove_core = ROOT
					#}
				}
			}
		}
	}
	ai_will_do = {
		always = no
	}
}

# to_change_elysian_governor_color = {
# 	category = influence
# 	require_acceptance = no
# 	is_visible = {
# 		FROM = {
# 			is_subject_of = ROOT
# 			OR = {
# 				tag = ED0
# 				tag = ED1
# 			}
# 		}
# 	}
# 	is_allowed = {
# 		FROM = {
# 			is_subject_of_type = to_elysian_governor
# 		}
# 	}
# 	on_accept = {
# 		FROM = {
# 			if = {
# 				limit = {
# 					tag = ED0
# 				}
# 				to_change_tag = { TAG = ED1 }
# 			}
# 			else_if = {
# 				limit = {
# 					tag = ED1
# 				}
# 				to_change_tag = { TAG = ED0 }
# 			}
# 		}
# 	}
# 	ai_will_do = {
# 		always = no
# 	}
# }

# Imperial Protectorates
to_release_as_protectorate = {
	category = influence
	require_acceptance = no
	is_visible = {
		mission_completed = to_a_world_empire_mission
		FROM = {
			is_subject_of = ROOT
			OR = {
				is_subject_of_type = vassal
				is_subject_of_type = march
				is_subject_of_type = client_vassal
				is_subject_of_type = client_march
			}
			to_has_imperial_protectorate_tech_group = yes
		}
	}
	is_allowed = {
		FROM = {
			OR = {
				is_subject_of_type = vassal
				is_subject_of_type = march
				is_subject_of_type = client_vassal
				is_subject_of_type = client_march
			}
		}
	}
	on_accept = {
		FROM = {
			set_country_flag = to_do_not_change_annexation_date
		}
		create_subject = {
			subject_type = to_imperial_protectorate
			subject = FROM
			keep_liberty_desire = yes
		}
		FROM = {
			every_subject_country = {
				limit = {
					is_subject_of_type = tributary_state
				}
				grant_independence = yes
			}
		}
		FROM = {
			clr_country_flag = to_do_not_change_annexation_date
		}
	}
	ai_will_do = {
		always = no
	}
}

to_establish_imperial_protectorate = {
	category = influence
	require_acceptance = yes

	alert_index = 4
	alert_tooltip = to_establish_imperial_protectorate_alert_tooltip

	is_visible = {
		mission_completed = to_a_world_empire_mission
		is_subject = no
		FROM = {
			is_subject = no
			to_has_imperial_protectorate_tech_group = yes
		}
	}
	is_allowed = {
		is_at_war = no
		FROM = {
			is_at_war = no
			if = {
				limit = {
					OR = {
						has_dlc = "Rights of Man"
						has_dlc = "Emperor"
					}
				}
				is_great_power = no
			}
			# has_opinion = { who = ROOT value = 50 }
			capital_scope = {
				trade_range = ROOT
			}
			to_has_imperial_protectorate_tech_group = yes
			if = {
				limit = {
					has_reform = steppe_horde
				}
				NOT = { has_reform = steppe_horde }
			}
			if = {
				limit = {
					has_reform = great_mongol_state_reform
				}
				NOT = { has_reform = great_mongol_state_reform }
			}
		}
	}
	on_accept = {
		create_subject = {
			subject_type = to_imperial_protectorate
			subject = FROM
		}
		FROM = {
			every_subject_country = {
				limit = {
					is_subject_of_type = tributary_state
				}
				grant_independence = yes
			}
		}
	}

	ai_acceptance = { # This works similarly to variable_arithmetic_trigger, but does not support triggers generally. Instead, "limit" will be evaluated first and the rest ignored if it isn't passed.
		add_entry = {
			name = DIPLO_OPPINION
			export_to_variable = {
				variable_name = ai_value
				value = opinion
				who = FROM
				with = ROOT
			}
			multiply_variable = {
				which = ai_value 
				value = 0.125
			}
		}
		add_entry = {
			name = TO_TRUST
			limit = {
				OR = {
					has_dlc = "Leviathan"
					has_dlc = "The Cossacks"
				}
				FROM = {
					trust = { who = ROOT value = 50 }
				}
			}
			export_to_variable = {
				variable_name = ai_value
				value = trust
				who = FROM
				with = ROOT
			}
			subtract_variable = {
				which = ai_value
				value = 50
			}
			divide_variable = {
				which = ai_value
				value = 5
			}
		}
		add_entry = {
			name = TO_TRUST
			limit = {
				OR = {
					has_dlc = "Leviathan"
					has_dlc = "The Cossacks"
				}
				FROM = {
					trust = { who = ROOT value = 30 }
					NOT = { trust = { who = ROOT value = 50 } }
				}
			}
			export_to_variable = {
				variable_name = ai_value
				value = trust
				who = FROM
				with = ROOT
			}
			subtract_variable = {
				which = ai_value
				value = 50
			}
			multiply_variable = {
				which = ai_value
				value = 2
			}
		}
		add_entry = {
			name = TO_TRUST
			limit = {
				OR = {
					has_dlc = "Leviathan"
					has_dlc = "The Cossacks"
				}
				FROM = {
					NOT = { trust = { who = ROOT value = 30 } }
				}
			}
			export_to_variable = {
				variable_name = ai_value
				value = -2000
			}
		}
		add_entry = {
			name = AI_DIPLOMATIC_REPUTATION
			export_to_variable = {
				variable_name = ai_value
				value = trigger_value:diplomatic_reputation
			}
			#1 rep = 3
			multiply_variable = {
				which = ai_value
				value = 3
			}
		}
		add_entry = {
			name = AI_TOTAL_DEVELOPMENT
			export_to_variable = {
				variable_name = ai_value
				value = total_development
				who = FROM
			}
			#4 dev = -1
			multiply_variable = {
				which = ai_value
				value = -0.25
			}
		}
		add_entry = {
			name = TO_VASSALIZATION_ACCEPTANCE
			export_to_variable = {
				variable_name = ai_value
				value = modifier:accept_vassalization_reasons
			}
		}
		add_entry = {
			name = attitude_neutral_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_neutral } } }
			export_to_variable = { variable_name = ai_value value = -20 }
		}
		add_entry = {
			name = attitude_rivalry_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_rivalry } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_hostile_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_hostile } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_friendly_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_friendly } } }
			export_to_variable = { variable_name = ai_value value = 10 }
		}
		add_entry = {
			name = attitude_threatened_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_threatened } } }
			export_to_variable = { variable_name = ai_value value = 10 }
		}
		add_entry = {
			name = attitude_outraged_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_outraged } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_domineering_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_domineering } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = DIPLO_BORDER_DISTANCE_TT
			export_to_variable = {
				variable_name = ai_value
				value = border_distance
				who = FROM
				with = ROOT
			}
			#10 units = -1
			multiply_variable = {
				which = ai_value
				value = -0.1
			}
		}
	}

	ai_will_do = { # this is a trigger
		OR = {
			ai_attitude = {
				who = FROM
				attitude = attitude_friendly
			}
			ai_attitude = {
				who = FROM
				attitude = attitude_protective
			}
			FROM = {
				any_neighbor_country = {
					NOT = { tag = ROOT }
					FROM = {
						ai_attitude = {
							who = PREV
							attitude = attitude_threatened
						}
					}
				}
			}
			FROM = {
				ai_attitude = {
					who = ROOT
					attitude = attitude_threatened
				}
			}
		}
		NOT = {
			ai_attitude = {
				who = FROM
				attitude = attitude_domineering
			}
		}
		NOT = {
			ai_attitude = {
				who = FROM
				attitude = attitude_hostile
			}
		}
		NOT = {
			ai_attitude = {
				who = FROM
				attitude = attitude_outraged
			}
		}
		has_opinion = {
			who = FROM
			value = 50
		}
		NOT = {
			FROM = {
				has_country_modifier = dissolve_protectorate_timer
			}
		}
	}
}

to_request_imperial_protectorate = {
	category = influence
	require_acceptance = yes

	alert_index = 4
	alert_tooltip = to_request_imperial_protectorate_alert_tooltip

	is_visible = {
		FROM = { mission_completed = to_a_world_empire_mission }
		to_has_imperial_protectorate_tech_group = yes
		is_subject = no
		FROM = { is_subject = no }
		NOT = { has_reform = steppe_horde }
		NOT = { has_reform = great_mongol_state_reform }
	}
	is_allowed = {
		if = {
			limit = {
				NOT = {
					capital_scope = {
						trade_range = FROM
					}
				}
			}
			custom_trigger_tooltip = {
				tooltip = REQUIRES_FROM_TO_BE_IN_TRADE_RANGE_TT
				capital_scope = {
					trade_range = FROM
				}
			}
		}
		if = {
			limit = {
				FROM = { is_at_war = yes }
			}
			custom_trigger_tooltip = {
				tooltip = FROM_IS_AT_WAR_TT
				FROM = { is_at_war = no }
			}
		}
		if = {
			limit = {
				is_at_war = yes
			}
			custom_trigger_tooltip = {
				tooltip = ROOT_IS_AT_WAR_TT
				is_at_war = no
			}
		}
	}
	on_accept = {
		FROM = {
			create_subject = {
				subject_type = to_imperial_protectorate
				subject = ROOT
			}
		}
		every_subject_country = {
			limit = {
				is_subject_of_type = tributary_state
			}
			grant_independence = yes
		}
	}
	on_decline = {
	}

	ai_will_do = { # this is a trigger
		is_great_power = no
		if = {
			limit = {
				OR = {
					has_dlc = "Leviathan"
					has_dlc = "The Cossacks"
				}
			}
			trust = { who = FROM value = 50 }
		}
		has_opinion = {
			who = FROM
			value = 50
		}
		OR = {
			ai_attitude = {
				who = FROM
				attitude = attitude_threatened
			}
			any_neighbor_country = {
				NOT = { tag = FROM }
				ROOT = {
					ai_attitude = {
						who = PREV
						attitude = attitude_threatened
					}
				}
			}
			FROM = {
				OR = {
					ai_attitude = {
						who = ROOT
						attitude = attitude_domineering
					}
					ai_attitude = {
						who = ROOT
						attitude = attitude_protective
					}
				}
			}
		}
		NOT = { mil_tech = FROM }
		OR = {
			NOT = { army_size = FROM }
			AND = {
				capital_scope = { is_island = yes }
				NOT = { navy_size = FROM }
			}
			FROM = {
				military_strength = {
					who = ROOT
					value = 2
				}
			}
		}
		NOT = { has_country_modifier = dissolve_protectorate_timer }
		NOT = {
			ai_attitude = {
				who = FROM
				attitude = attitude_rivalry
			}
		}
		NOT = {
			ai_attitude = {
				who = FROM
				attitude = attitude_hostile
			}
		}
		NOT = {
			ai_attitude = {
				who = FROM
				attitude = attitude_outraged
			}
		}
		NOT = {
			ai_attitude = {
				who = FROM
				attitude = attitude_domineering
			}
		}
	}

	ai_acceptance = {
        add_entry = {
            name = DIPLO_OPPINION
			export_to_variable = {
				variable_name = ai_value
				value = opinion
				who = FROM
				with = ROOT
			}
			multiply_variable = {
				which = ai_value 
				value = 0.125
			}
        }
		add_entry = {
			name = TO_TRUST
			limit = {
				OR = {
					has_dlc = "Leviathan"
					has_dlc = "The Cossacks"
				}
				FROM = {
					trust = { who = ROOT value = 50 }
				}
			}
			export_to_variable = {
				variable_name = ai_value
				value = trust
				who = FROM
				with = ROOT
			}
			subtract_variable = {
				which = ai_value
				value = 50
			}
			divide_variable = {
				which = ai_value
				value = 5
			}
		}
		add_entry = {
			name = TO_TRUST
			limit = {
				OR = {
					has_dlc = "Leviathan"
					has_dlc = "The Cossacks"
				}
				FROM = {
					trust = { who = ROOT value = 30 }
					NOT = { trust = { who = ROOT value = 50 } }
				}
			}
			export_to_variable = {
				variable_name = ai_value
				value = trust
				who = FROM
				with = ROOT
			}
			subtract_variable = {
				which = ai_value
				value = 50
			}
			multiply_variable = {
				which = ai_value
				value = 2
			}
		}
		add_entry = {
			name = TO_TRUST
			limit = {
				OR = {
					has_dlc = "Leviathan"
					has_dlc = "The Cossacks"
				}
				FROM = {
					NOT = { trust = { who = ROOT value = 30 } }
				}
			}
			export_to_variable = {
				variable_name = ai_value
				value = -2000
			}
		}
		add_entry = {
			name = AI_DIPLOMATIC_REPUTATION
			export_to_variable = {
				variable_name = ai_value
				value = trigger_value:diplomatic_reputation
			}
			#1 rep = 3
			multiply_variable = {
				which = ai_value
				value = 3
			}
		}
		add_entry = {
			name = DIPLO_OUR_TOTAL_DEVELOPMENT_TT
			export_to_variable = {
				variable_name = ai_value
				value = total_development
				who = ROOT
			}
			#10 dev = -1
			multiply_variable = {
				which = ai_value
				value = -0.1
			}
		}
		add_entry = {
			name = attitude_neutral_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_neutral } } }
			export_to_variable = { variable_name = ai_value value = 1 }
			multiply_variable = { which = ai_value value = -20 }
		}
		add_entry = {
			name = attitude_rivalry_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_rivalry } } }
			export_to_variable = { variable_name = ai_value value = 1 }
			multiply_variable = { which = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_hostile_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_hostile } } }
			export_to_variable = { variable_name = ai_value value = 1 }
			multiply_variable = { which = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_friendly_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_friendly } } }
			export_to_variable = { variable_name = ai_value value = 1 }
			multiply_variable = { which = ai_value value = 50 }
		}
		add_entry = {
			name = attitude_outraged_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_outraged } } }
			export_to_variable = { variable_name = ai_value value = 1 }
			multiply_variable = { which = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_domineering_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_domineering } } }
			export_to_variable = { variable_name = ai_value value = 1 }
			multiply_variable = { which = ai_value value = 1000 }
		}
		add_entry = {
			name = attitude_protective_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_protective } } }
			export_to_variable = { variable_name = ai_value value = 1 }
			multiply_variable = { which = ai_value value = 1000 }
		}
		add_entry = {
			name = DIPLO_BORDER_DISTANCE_TT
			export_to_variable = {
				variable_name = ai_value
				value = border_distance
				who = FROM
				with = ROOT
			}
			#10 units = -1
			multiply_variable = {
				which = ai_value
				value = -0.1
			}
		}
	}
}

to_dissolve_imperial_protectorate =  {
	category = influence
	require_acceptance = no
	is_visible = {
		overlord_of = FROM
		FROM = {
			is_subject_of_type = to_imperial_protectorate
		}
	}
	is_allowed = {
		is_at_war = no
		FROM = {
			is_at_war = no
		}
	}
	on_accept = {
		add_trust = {
			who = FROM
			value = -50
			mutual = yes
		}
		FROM = {
			grant_independence = yes
			add_country_modifier = {
				name = dissolve_protectorate_timer
				duration = 3650
				hidden = yes
			}
		}
		to_on_dependency_lost = yes
	}
	ai_will_do = {
		always = no
	}
}

# Varangians
nhs_vgd_grant_area = {
	category = influence
	require_acceptance = no
	is_visible = {
		nhs_check_all_elysian_tags = { CONDITION = tag }
		NOT = { has_country_flag = to_varangians_settled_on_malta }
		overlord_of = FROM
		FROM = {
			tag = VGD
		}
		# FROM = {
			# capital_scope = {
				# any_neighbor_province = {
					# area = PREV
					# owned_by = ROOT
				# }
			# }
		# }
	}
	is_allowed = {
		is_at_war = no
		FROM = {
			is_at_war = no
		}
		custom_trigger_tooltip = {
			tooltip = nhs_has_provinces_in_their_capital_area_tt
			any_owned_province = {
				any_province = {
					area = PREV
					is_capital = yes
					owned_by = FROM
				}
			}
		}
	}
	on_accept = {
		set_country_flag = nhs_var_area
		every_province = {
			limit = {
				owned_by = ROOT
				is_colony = no
				any_province = {
					area = PREV
					is_capital = yes
					owned_by = FROM
				}
			}
			if = {
				limit = {
					is_core = ROOT
				}
				add_core = FROM
			}
			if = {
				limit = {
					OR = {
						culture_group = byzantine
						culture_group = norse_g
					}
				}
				if = {
					limit = {
						owner = {
							NOT = { has_country_flag = to_varangian_culture_change }
						}
					}
					change_culture = varangian_n
				}
				else = {
					change_culture = varangian_e
				}
			}
			cede_province = FROM
		}
	}
	ai_will_do = {
		always = no
	}
}

to_integrate_varangian_order = {
	category = influence
	require_acceptance = no
	is_visible = {
		nhs_check_all_elysian_tags = { CONDITION = tag }
		overlord_of = FROM
		FROM = { 
			tag = VGD 
		}
	}
	is_allowed = {
		adm_tech = 10
		is_at_war = no
		adm_power = 100
		dip_power = 200
		FROM = {
			is_at_war = no
			if = {
				limit = {
					has_country_flag = to_became_a_subject
				}
				if = {
					limit = {
						check_variable = {
							which = to_protectorate_annexation_month
							value = 1
						}
						check_variable = {
							which = to_protectorate_annexation_year_20
							value = 1
						}
					}
					custom_trigger_tooltip = {
						tooltip = to_integrate_varangians_date_specific_tt
						had_country_flag = {
							flag = to_became_a_subject
							days = 7300
						}
					}
				}
				else = {
					custom_trigger_tooltip = {
						tooltip = to_integrate_varangians_date_tt
						had_country_flag = {
							flag = to_became_a_subject
							days = 7300
						}
					}
				}
			}
		}
	}
	on_accept = {
		clr_country_flag = nhs_varangian_guard_substate
		set_country_flag = nhs_varangian_guard_integrated
		FROM = {
			capital_scope = {
				set_province_flag = vov_capital
			}
			every_owned_province = {
				cede_province = ROOT
				if = {
					limit = { has_province_flag = vov_capital }
					add_province_modifier = {
						name = to_varangian_headquarters
						duration = -1
					}
					clr_province_flag = vov_capital
				}
				else = {
					add_province_modifier = {
						name = to_varangian_stronghold
						duration = -1
					}
				}
				if = {
					limit = {
						is_core = FROM
					}
					add_core = ROOT
					remove_core = FROM 
				}
			}
		}
		every_owned_province = {
			limit = {
				has_province_modifier = to_varangian_stronghold_independent
			}
			remove_province_modifier = to_varangian_stronghold_independent
			add_province_modifier = {
				name = to_varangian_stronghold
				duration = -1
			}
		}
	}
}

# Roman Janissaries
to_demand_blood_tax = {
	category = influence
	require_acceptance = no
	is_visible = {
		has_country_modifier = to_janissary_child_levy
		FROM = { is_subject_of = ROOT }
		FROM = { NOT = { has_country_modifier = to_blood_tax } }
		FROM = { NOT = { has_country_modifier = to_blood_tax_true_faith } }
	}
	is_allowed = {
		FROM = { NOT = { primary_culture = ROOT } }
		if = {
			limit = {
				to_has_abrahamic_religion = yes
			}
			OR = {
				NOT = { religion_group = FROM }
				has_country_modifier = to_janissaries_from_true_faith
			}
		}
		else = {
			OR = {
				NOT = { religion = FROM }
				has_country_modifier = to_janissaries_from_true_faith
			}
		}
	}
	on_accept = {
		FROM = {
			if = {
				limit = {
					to_has_abrahamic_religion = yes
					religion_group = ROOT
				}
				add_country_modifier = {
					name = to_blood_tax_true_faith
					duration = -1
				}
			}
			else = {
				add_country_modifier = {
					name = to_blood_tax
					duration = -1
				}
			}
			clr_country_flag = to_has_blood_tax
			set_country_flag = to_has_blood_tax
		}
	}
	ai_will_do = {
		always = no
	}
}

to_revoke_blood_tax = {
	category = influence
	require_acceptance = no
	is_visible = {
		has_country_modifier = to_janissary_child_levy
		FROM = { is_subject_of = ROOT }
		FROM = {
			OR = {
				has_country_modifier = to_blood_tax
				has_country_modifier = to_blood_tax_true_faith
			}
		}
	}
	is_allowed = {
		FROM = {
			had_country_flag = {
				flag = to_has_blood_tax
				days = 7300
			}
		}
	}
	on_accept = {
		FROM = {
			remove_country_modifier = to_blood_tax
			remove_country_modifier = to_blood_tax_true_faith
			clr_country_flag = to_has_blood_tax
		}
	}
	ai_will_do = {
		always = no
	}
}

to_demand_religious_unity = {
	category = emperor
	require_acceptance = yes
	is_visible = {
		is_emperor = yes
		mission_completed = to_neither_holy_nor_roman_mission
		religion_group = christian
		FROM = {
			is_part_of_hre = yes
			religion_group = christian
			NOT = { religion = ROOT }
		}
	}
	is_allowed = {
		if = {
			limit = {
				NOT = { imperial_influence = 1 }
			}
			custom_trigger_tooltip = {
				tooltip = to_less_than_one_authority_diplo_tt
				always = no
			}
		}
	}
	on_accept = {
		add_imperial_influence = -1
		FROM = {
			change_religion = ROOT
			force_converted = yes
		}
	}
	on_decline = {
		add_imperial_influence = -1
		add_casus_belli = {
			target = FROM
			type = cb_religious_conformance
			months = 24
		}
	}

	ai_acceptance = { # This works similarly to variable_arithmetic_trigger, but does not support triggers generally. Instead, "limit" will be evaluated first and the rest ignored if it isn't passed.
		add_entry = {
			name = attitude_allied_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_allied } } }
			export_to_variable = { variable_name = ai_value value = 20 }
		}
		add_entry = {
			name = attitude_neutral_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_neutral } } }
			export_to_variable = { variable_name = ai_value value = -10 }
		}
		add_entry = {
			name = attitude_rivalry_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_rivalry } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_hostile_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_hostile } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_friendly_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_friendly } } }
			export_to_variable = { variable_name = ai_value value = 20 }
		}
		add_entry = {
			name = attitude_threatened_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_threatened } } }
			export_to_variable = { variable_name = ai_value value = -10 }
		}
		add_entry = {
			name = attitude_outraged_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_outraged } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_domineering_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_domineering } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_rebellious_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_rebellious } } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
		add_entry = {
			name = attitude_disloyal_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_disloyal } } }
			export_to_variable = { variable_name = ai_value value = -30 }
		}
		add_entry = {
			name = attitude_loyal_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_loyal } } }
			export_to_variable = { variable_name = ai_value value = 20 }
		}
		add_entry = {
			name = attitude_protective_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_protective } } }
			export_to_variable = { variable_name = ai_value value = 20 }
		}
		add_entry = {
			name = attitude_defensive_DIPLO_ATTITUDE_TT
			limit = { FROM = { ai_attitude = { who = ROOT attitude = attitude_defensive } } }
			export_to_variable = { variable_name = ai_value value = 20 }
		}
		add_entry = {
			name = DIPLO_OPPINION
			limit = { FROM = { has_opinion = { who = ROOT value = 0 } } }
			export_to_variable = {
				variable_name = ai_value
				value = opinion
				who = FROM
				with = ROOT
			}
			divide_variable = {
				which = ai_value 
				value = 5
			}
		}
		add_entry = {
			name = DIPLO_OPPINION
			limit = { FROM = { NOT = { has_opinion = { who = ROOT value = 0 } } } }
			export_to_variable = {
				variable_name = ai_value
				value = opinion
				who = FROM
				with = ROOT
			}
			divide_variable = {
				which = ai_value 
				value = 2
			}
		}
		add_entry = {
			name = AI_DIPLOMATIC_REPUTATION
			export_to_variable = {
				variable_name = ai_value
				value = trigger_value:diplomatic_reputation
			}
			# Round down, couse pdx did it as well
			multiply_variable = { 
				which = ai_value
				value = 0.001
			}
			multiply_variable = { 
				which = ai_value
				value = 1000
			}
			#1 rep = 3
			multiply_variable = {
				which = ai_value
				value = 3
			}
		}
		add_entry = {
			name = TO_PRESTIGE
			export_to_variable = {
				variable_name = ai_value
				value = trigger_value:prestige
			}
			export_to_variable = {
				variable_name = prestige_from
				value = trigger_value:prestige
				who = FROM
			}
			subtract_variable = {
				which = ai_value
				which = prestige_from
			}
			divide_variable = {
				which = ai_value
				value = 10
			}
			# Round up
			change_variable = {
				which = ai_value
				value = 0.501
			}
			multiply_variable = { 
				which = ai_value
				value = 0.001
			}
			multiply_variable = { 
				which = ai_value
				value = 1000
			}
		}
		add_entry = {
			name = DIPLO_NUM_OF_PROVINCES
			export_to_variable = {
				variable_name = ai_value
				value = trigger_value:num_of_cities
				who = FROM
			}
			#Vanilla, each province beyond 1st: 5
			#Here, each province beyond 1st: 3
			subtract_variable = {
				which = ai_value
				value = 1
			}
			multiply_variable = {
				which = ai_value
				value = -3
			}
		}
		add_entry = {
			name = TO_IS_AT_WAR_AGAINST
			limit = { FROM = { war_with = ROOT } }
			export_to_variable = { variable_name = ai_value value = -1000 }
		}
	}

	ai_will_do = {
		always = no
	}
}