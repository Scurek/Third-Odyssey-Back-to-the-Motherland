from PIL import Image, ImageColor, ImageDraw
import os

if not os.path.isdir('icons'):
    os.makedirs('icons')

def interpolate(color1, color2, a):
    return int(color1[0] * (1 - a) + color2[0] * a), \
           int(color1[1] * (1 - a) + color2[1] * a), int(color1[2] * (1 - a) +
                                                         color2[2] * a)


def btree(lst, form, body):
    if not len(lst):
        return ''
    elif len(lst) == 1:
        return body % (lst[0], lst[0])
    else:
        return form % (lst[int(len(lst) / 2)],
                       btree(lst[int(len(lst) / 2):], form, body),
                       btree(lst[:int(len(lst) / 2)], form, body))


modifiers = [
    {
        'name': 'nhs_elysian_highways_inprogress',
        'file_name': 'elysian_highways_inprogress.dds',
        'title': 'Elysian Highway (In Progress)',
        'desc': '[Root.GetElysianHighwaysInProgressDesc]'}
]

images = [Image.open(f'{modifier["file_name"]}') for modifier in modifiers]

width, height = images[0].size

draws = [ImageDraw.Draw(image) for image in images]

yellow = ImageColor.getrgb('#ffbb00')
green = ImageColor.getrgb('#008000')

part_size = int(100 / width)

for index, image in enumerate(images):
    image.save(f'icons/{modifiers[index]["name"]}_0.dds')

fractions = [0]

for i in range(0, width - 4):
    shape = ((2, int(height * 0.875)), (2 + i, height))
    color = interpolate(yellow, green, i / width)
    fraction = int((i + 1) / (width - 3) * 100)
    fractions.append(fraction)
    for index, image in enumerate(images):
        draws[index].rectangle(shape, fill=color)
        image.save(f'icons/{modifiers[index]["name"]}_{fraction}.dds')

cond = 'check_variable={which=to_elysian_highway_progress value=%s}'
body = 'if = {limit={NOT={has_province_modifier=$MODIFIER_BASE_NAME$_%s}} ' \
       'to_remove_elysian_highways_modifiers=yes add_permanent_province_modifier={' \
       'name=$MODIFIER_BASE_NAME$_%s duration=-1} }'
form = 'if={limit={%s}%s}else={%s}' % (cond, '%s', '%s')

with open('o_remove_elysian_highways_modifiers.txt', 'w') as f:
    f.write('to_remove_elysian_highways_modifiers = {\n')
    f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
    for index, image in enumerate(images):
        for i in fractions:
            f.write(f'\tremove_province_modifier = {modifiers[index]["name"]}_{i}\n')
    f.write('}')

with open('o_to_set_correct_elysian_highways_modifier.txt', 'w') as f:
    f.write('to_set_correct_elysian_highways_modifier = {\n')
    f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    f.write(btree([i for i in fractions], form, body))
    f.write('\n}')

with open('o_localisation.txt', 'w') as f:
    f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
    for index, image in enumerate(images):
        for i in fractions:
            f.write(f' {modifiers[index]["name"]}_{i}:0 \"{modifiers[index]["title"]}\"\n')
            f.write(f' desc_{modifiers[index]["name"]}_{i}:0 \"{modifiers[index]["desc"]}\"\n')

with open('o_modifiers.txt', 'w') as f:
    f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
    for index, image in enumerate(images):
        for i in fractions:
            f.write(f'{modifiers[index]["name"]}_{i} = {{\n')
            f.write(f'\tpicture = \"{modifiers[index]["name"]}_{i}\"\n')
            f.write('}\n\n')
