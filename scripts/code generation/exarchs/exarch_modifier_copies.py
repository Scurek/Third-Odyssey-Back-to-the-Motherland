import os


def btree_triplet(lst, form, body):
    if not len(lst):
        return ''
    elif len(lst) == 1:
        return body % (lst[0][1], lst[0][2])
    else:
        return form % (lst[int(len(lst) / 2)][0],
                       btree_triplet(lst[int(len(lst) / 2):], form, body),
                       btree_triplet(lst[:int(len(lst) / 2)], form, body))


def btree(lst, form, body):
    if not len(lst):
        return ''
    elif len(lst) == 1:
        return body % (lst[0], lst[0])
    else:
        return form % (lst[int(len(lst) / 2)],
                       btree(lst[int(len(lst) / 2):], form, body),
                       btree(lst[:int(len(lst) / 2)], form, body))


defines = [
    {
        "modifier_name": "to_exarch_nationalism",
        "modifier": "years_of_nationalism",
        "multiplier": 1,
        "min": -50,
        "max": 50,
        "localisation": "Overlord's Years of Separatism Difference",
        "remove_function_name": "to_remove_exarch_nationalism_modifiers",
        "add_function_name": "to_add_correct_exarch_nationalism_modifier",
        "body": 'if = {limit={NOT={has_country_modifier=to_exarch_nationalism_%s}} '
                'to_remove_exarch_nationalism_modifiers=yes add_country_modifier={'
                'name=to_exarch_nationalism_%s duration=-1 hidden = yes} }',
        "form": 'if={limit={%s}%s}else={%s}' %
                ('check_variable={which=to_exarch_nationalism_diff value=%s}', '%s', '%s')
    },
    {
        "modifier_name": "to_exarch_local_nationalism",
        "modifier": "local_years_of_nationalism",
        "multiplier": 1,
        "min": 1,
        "max": 100,
        "remove_function_name": "to_remove_exarch_local_nationalism_modifiers",
        "add_function_name": "to_add_correct_exarch_local_nationalism_modifier",
        "body": 'if = {limit={NOT={has_province_modifier=to_exarch_local_nationalism_%s}} '
                'add_province_modifier={'
                'name=to_exarch_local_nationalism_%s duration=-1 hidden = yes} }',
        "form": 'if={limit={%s}%s}else={%s}' %
                ('check_variable={which=to_saved_years_of_nationalism value=%s}', '%s', '%s')
    },
    {
        "modifier_name": "to_exarch_coring_cost",
        "modifier": "core_creation",
        "multiplier": 0.01,
        "min": -200,
        "max": 200,
        "localisation": "Overlord's Coring Cost Reduction Difference",
        "remove_function_name": "to_remove_exarch_coring_cost_modifiers",
        "add_function_name": "to_add_correct_exarch_coring_cost_modifier",
        "body": 'if = {limit={NOT={has_country_modifier=to_exarch_coring_cost_%s}} '
                'to_remove_exarch_coring_cost_modifiers=yes add_country_modifier={'
                'name=to_exarch_coring_cost_%s duration=-1 hidden = yes} }',
        "form": 'if={limit={%s}%s}else={%s}' %
                ('check_variable={which=to_exarch_coring_cost_diff value=%s}', '%s', '%s')
    },
    {
        "modifier_name": "to_exarch_admin_efficiency",
        "modifier": "administrative_efficiency",
        "multiplier": 0.01,
        "min": -100,
        "max": 100,
        "localisation": "Overlord's Administrative Efficiency Difference",
        "remove_function_name": "to_remove_exarch_admin_efficiency_modifiers",
        "add_function_name": "to_add_correct_exarch_admin_efficiency_modifier",
        "body": 'if = {limit={NOT={has_country_modifier=to_exarch_admin_efficiency_%s}} '
                'to_remove_exarch_admin_efficiency_modifiers=yes add_country_modifier={'
                'name=to_exarch_admin_efficiency_%s duration=-1 hidden = yes} }',
        "form": 'if={limit={%s}%s}else={%s}' %
                ('check_variable={which=to_exarch_admin_efficiency_diff value=%s}', '%s', '%s')
    }
]

with open('o_exarch_modifier_copies_effects.txt', 'w') as f:
    for copy in defines:
        f.write(f'{copy["remove_function_name"]} = {{\n')
        f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
        for i in range(int(copy["min"]), int(copy["max"]) + 1):
            f.write(f"	remove_country_modifier = {copy["modifier_name"]}_{i + abs(int(copy["min"]))}\n")
        f.write("}\n\n")

        f.write(f'{copy["add_function_name"]} = {{\n')
        f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n	")
        f.write(btree_triplet([(round(i * float(copy["multiplier"]), 2), i + abs(int(copy["min"])), i + abs(int(copy["min"])))
                               for i in range(int(copy["min"]), int(copy["max"]) + 1)], copy["form"], copy["body"]))
        f.write("\n}\n\n")

with open('o_exarch_modifier_copies_modifiers.txt', 'w') as f:
    f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
    for copy in defines:
        for i in range(int(copy["min"]), int(copy["max"]) + 1):
            f.write(f"{copy["modifier_name"]}_{i + abs(int(copy["min"]))} = {{\n")
            f.write(f"	{copy["modifier"]} = {round(i * float(copy["multiplier"]), 2)}\n")
            f.write("}\n")

with open('o_exarch_modifier_copies_localisation.txt', 'w') as f:
    f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
    for copy in defines:
        if "localisation" not in copy:
            continue

        for i in range(int(copy["min"]), int(copy["max"]) + 1):
            f.write(f" {copy["modifier_name"]}_{i + abs(int(copy["min"]))}:0 \"{copy["localisation"]}\"\n")

# GLOBAL NATIONALISM

MIN_NATIONALISM_MODIFIER = -50
MAX_NATIONALISM_MODIFIER = 50

cond_global = 'check_variable={which=to_exarch_nationalism_diff value=%s}'
body_global = 'if = {limit={NOT={has_country_modifier=to_exarch_nationalism_%s}} ' \
       'to_remove_exarch_nationalism_modifiers=yes add_country_modifier={' \
       'name=to_exarch_nationalism_%s duration=-1 hidden = yes} }'
form_global = 'if={limit={%s}%s}else={%s}' % (cond_global, '%s', '%s')

# LOCAL NATIONALISM

MAX_LOCAL_NATIONALISM_MODIFIER = 100

cond_local = 'check_variable={which=to_saved_years_of_nationalism value=%s}'
body_local = 'if = {limit={NOT={has_province_modifier=to_exarch_local_nationalism_%s}} ' \
             'add_province_modifier={' \
             'name=to_exarch_local_nationalism_%s duration=-1 hidden = yes} }'
form_local = 'if={limit={%s}%s}else={%s}' % (cond_local, '%s', '%s')

# CORING COST

MIN_CORING_COST_MODIFIER = -200
MAX_CORING_COST_MODIFIER = 200

cond_ccr = 'check_variable={which=to_coring_cost_diff value=%s}'
body_ccr = 'if = {limit={NOT={has_country_modifier=to_exarch_coring_cost_%s}} ' \
           'to_remove_exarch_coring_cost_modifiers=yes add_country_modifier={' \
           'name=to_exarch_coring_cost_%s duration=-1 hidden = yes} }'
form_ccr = 'if={limit={%s}%s}else={%s}' % (cond_ccr, '%s', '%s')

# with open('o_exarch_modifier_copies_effects.txt', 'w') as f:
#     f.write('to_remove_exarch_nationalism_modifiers = {\n')
#     f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
#     for i in range(MIN_NATIONALISM_MODIFIER, MAX_NATIONALISM_MODIFIER + 1):
#         f.write(f"	remove_country_modifier = to_exarch_nationalism_{i + abs(MIN_NATIONALISM_MODIFIER)}\n")
#     f.write("}\n\n")
#
#     f.write('to_add_correct_exarch_nationalism_modifier = {\n')
#     f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n	")
#     f.write(btree_triplet([(i, i + abs(MIN_NATIONALISM_MODIFIER), i + abs(MIN_NATIONALISM_MODIFIER))
#                            for i in range(MIN_NATIONALISM_MODIFIER, MAX_NATIONALISM_MODIFIER + 1)], form, body))
#     f.write("\n}\n\n")
#
#     # LOCAL
#     f.write('to_remove_exarch_local_nationalism_modifiers = {\n')
#     f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
#     for i in range(1, MAX_LOCAL_NATIONALISM_MODIFIER + 1):
#         f.write(f"	remove_province_modifier = to_exarch_local_nationalism_{i}\n")
#     f.write("}\n\n")
#
#     f.write('to_add_correct_exarch_local_nationalism_modifier = {\n')
#     f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n	")
#     f.write(btree(
#         [i for i in range(1, MAX_LOCAL_NATIONALISM_MODIFIER + 1)], form_local,
#         body_local) + '\n}')
#
#     # CORING COST
#     f.write('to_remove_exarch_coring_cost_modifiers = {\n')
#     f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
#     for i in range(MIN_CORING_COST_MODIFIER, MAX_CORING_COST_MODIFIER + 1):
#         f.write(f"	remove_country_modifier = to_exarch_coring_cost_{i + abs(MIN_CORING_COST_MODIFIER)}\n")
#     f.write("}\n\n")
#
#     f.write('to_add_correct_exarch_cost_cost_modifier = {\n')
#     f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n	")
#     f.write(btree_triplet([(i, i + abs(MIN_CORING_COST_MODIFIER), i + abs(MIN_CORING_COST_MODIFIER))
#                            for i in range(MIN_CORING_COST_MODIFIER, MAX_CORING_COST_MODIFIER + 1)], form, body))
#     f.write("\n}\n\n")
#
# with open('o_exarch_modifier_copies_modifiers.txt', 'w') as f:
#     f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
#     for i in range(MIN_NATIONALISM_MODIFIER, MAX_NATIONALISM_MODIFIER + 1):
#         f.write(f"to_exarch_nationalism_{i + abs(MIN_NATIONALISM_MODIFIER)} = {{\n")
#         f.write(f"	years_of_nationalism = {i}\n")
#         f.write("}\n")
#     # LOCAL
#     for i in range(1, MAX_LOCAL_NATIONALISM_MODIFIER + 1):
#         f.write(f"to_exarch_local_nationalism_{i} = {{\n")
#         f.write(f"	local_years_of_nationalism = {i}\n")
#         f.write("}\n")
#
#     # CORING COST
#     f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
#     for i in range(MIN_CORING_COST_MODIFIER, MAX_CORING_COST_MODIFIER + 1):
#         f.write(f"to_exarch_coring_cost_{i + abs(MIN_CORING_COST_MODIFIER)} = {{\n")
#         f.write(f"	core_creation = {round(i * 0.01, 2)}\n")
#         f.write("}\n")
#
# with open('o_exarch_modifier_copies_localisation.txt', 'w') as f:
#     f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
#     for i in range(MIN_NATIONALISM_MODIFIER, MAX_NATIONALISM_MODIFIER + 1):
#         f.write(
#             f" to_exarch_nationalism_{i + abs(MIN_NATIONALISM_MODIFIER)}:0 \"Overlord's Years of Separatism Difference\"\n")
#
#     # CORING COST
#     f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
#     for i in range(MIN_CORING_COST_MODIFIER, MAX_CORING_COST_MODIFIER + 1):
#         f.write(
#             f" to_exarch_coring_cost_{i + abs(MIN_CORING_COST_MODIFIER)}:0 \"Overlord's Coring Cost Reduction Difference\"\n")
