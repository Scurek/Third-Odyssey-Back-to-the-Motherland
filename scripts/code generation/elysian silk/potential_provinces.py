import os
from jinja2 import Template, Environment

output_file_cl = "o_customizable_loc.txt"
output_file_loc = "o_loc.txt"
output_file_scripted_effects = "o_scripted_effects.txt"

STARTING_VALUE = 7
MAX_VALUE = 27

f = open(output_file_loc, "w", encoding="utf-8")
f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
for i in range(STARTING_VALUE, MAX_VALUE + 1):
    f.write(f" to_elysian_silk_potential_{i}_tt:0 \"{i}\"\n")
f.close()

f = open(output_file_cl, "w", encoding="utf-8")
f.write(f"	# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
for i in range(MAX_VALUE, STARTING_VALUE - 1, -1):
    f.write("	text = {\n")
    f.write(f"		localisation_key = to_elysian_silk_potential_{i}_tt\n")
    f.write("		trigger = {\n")
    f.write(f"			total_own_and_non_tributary_subject_development = {i - STARTING_VALUE + 1}000\n")
    f.write("		}\n")
    f.write("	}\n")
f.close()


def btree_tuple(lst, form, body):
    if not len(lst):
        return ''
    elif len(lst) == 1:
        return body % (lst[0][1])
    else:
        return form % (lst[int(len(lst) / 2)][0],
                       btree_tuple(lst[int(len(lst) / 2):], form, body),
                       btree_tuple(lst[:int(len(lst) / 2)], form, body))


cond = 'total_own_and_non_tributary_subject_development=%s'
body = 'NOT = {check_variable={which=to_elysian_silk_provinces value=%s}}'
form = 'if={limit={%s}%s}else={%s}' % (cond, '%s', '%s')

with open(output_file_scripted_effects, 'w') as f:
    f.write('to_can_add_additional_silk_province = {\n')
    f.write(f"# Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n")
    f.write(btree_tuple([((i - STARTING_VALUE + 1) * 1000, i) for i in range(STARTING_VALUE, MAX_VALUE + 1)], form, body) + '\n}')
