import os

output_file = "TO_ANY_export_complex_triggers.txt"


def btree(lst, form, body):
    if not len(lst):
        return ''
    elif len(lst) == 1:
        return body % lst[0]
    else:
        return form % (lst[int(len(lst) / 2)],
                       btree(lst[int(len(lst) / 2):], form, body),
                       btree(lst[:int(len(lst) / 2)], form, body))


fractions = [i for i in range(0, 101)]
fractions_1_dec = [i / 10 for i in range(0, 1001)]
fractions_2_dec = [i / 100 for i in range(0, 10001)]


with open(output_file, 'w') as f:
    # Loyalty
    cond = 'estate_loyalty={estate=$ESTATE$ loyalty=%s}'
    body = 'set_variable={which = $VARIABLE$ value = %s}'
    form = 'if={limit={%s}%s}else={%s}' % (cond, '%s', '%s')

    f.write('# ESTATE - Target estate, VARIABLE - Variable to export the value into\n')
    f.write('to_export_estate_loyalty = {\n')
    f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    f.write(btree([i for i in fractions], form, body))
    f.write('\n}\n')
    f.write('\n')
    # f.write('to_export_estate_loyalty_1_dec = {\n')
    # f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    # f.write(btree([i for i in fractions_1_dec], form, body))
    # f.write('\n}\n')
    # f.write('\n')
    # f.write('to_export_estate_loyalty_2_dec = {\n')
    # f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    # f.write(btree([i for i in fractions_2_dec], form, body))
    # f.write('\n}\n')

    # Influence
    cond = 'estate_influence={estate=$ESTATE$ influence=%s}'
    body = 'set_variable={which = $VARIABLE$ value = %s}'
    form = 'if={limit={%s}%s}else={%s}' % (cond, '%s', '%s')

    f.write('# ESTATE - Target estate, VARIABLE - Variable to export the value into\n')
    f.write('to_export_estate_influence = {\n')
    f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    f.write(btree([i for i in fractions], form, body))
    f.write('\n}\n')
    f.write('\n')
    # f.write('to_export_estate_influence_1_dec = {\n')
    # f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    # f.write(btree([i for i in fractions_1_dec], form, body))
    # f.write('\n}\n')
    # f.write('\n')
    # f.write('to_export_estate_influence_2_dec = {\n')
    # f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    # f.write(btree([i for i in fractions_2_dec], form, body))
    # f.write('\n}\n')

    # Territory
    cond = 'estate_territory={estate=$ESTATE$ territory=%s}'
    body = 'set_variable={which = $VARIABLE$ value = %s}'
    form = 'if={limit={%s}%s}else={%s}' % (cond, '%s', '%s')

    f.write('# ESTATE - Target estate, VARIABLE - Variable to export the value into\n')
    f.write('to_export_estate_territory = {\n')
    f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    f.write(btree([i for i in fractions], form, body))
    f.write('\n}\n')
    f.write('\n')
    # f.write('to_export_estate_territory_1_dec = {\n')
    # f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    # f.write(btree([i for i in fractions_1_dec], form, body))
    # f.write('\n}\n')
    # f.write('\n')
    # f.write('to_export_estate_territory_2_dec = {\n')
    # f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    # f.write(btree([i for i in fractions_2_dec], form, body))
    # f.write('\n}\n')

    # Trade Power
    cond = '$TRADE_NODE$={trade_share={country=$COUNTRY_SCOPE$ share=%s}}'
    body = 'set_variable={which = $VARIABLE$ value = %s}'
    form = 'if={limit={%s}%s}else={%s}' % (cond, '%s', '%s')

    f.write('# TRADE_NODE - Target trade node scope, COUNTRY_SCOPE - Target country, VARIABLE - Variable to export the value into\n')
    f.write('to_export_trade_share = {\n')
    f.write(f"  # Code generated by {os.path.basename(os.getcwd())}/{os.path.basename(__file__)}\n  ")
    f.write(btree([i for i in fractions], form, body))
    f.write('\n}\n')
    f.write('\n')
